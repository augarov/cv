---
description:
globs:
alwaysApply: true
---

# Project Structure Rule

Define and maintain the organized structure of the CV project with its multiple components.

<rule>
name: cv_project_structure
description: Standards for organizing the CV project structure with its multiple output formats and deployment targets
filters:
  # Match project structure changes
  - type: event
    pattern: "(directory_create|file_create|file_move)"
  # Match files that affect project organization
  - type: content
    pattern: "(?i)(structure|organization|directory|folder)"

actions:

- type: suggest
  message: |
  Maintain the CV project structure with these organized components:

  ## 📁 Core Project Structure

  ```
  cv/                           # Main project root
  ├── cv_data.yaml             # ✨ Single source of truth (YAML)
  ├── Makefile                 # Build automation
  ├── README.md                # Main project documentation
  │
  ├── cv_renderer/             # 🐍 Python Package
  │   ├── src/                # Source code directory (src-layout)
  │   │   └── cv_renderer/    # Main package module
  │   │       ├── __init__.py # Package initialization
  │   │       ├── __main__.py # CLI interface
  │   │       ├── app.py      # Main application logic
  │   │       ├── renderer.py # Core rendering logic
  │   │       ├── models.py   # Data models
  │   │       ├── logger.py   # Logging configuration
  │   │       ├── app_params.py # Application parameters
  │   │       └── template_type.py # Template type definitions
  │   ├── tests/              # Test suite
  │   │   ├── __init__.py     # Test package initialization
  │   │   └── test_*.py       # Test modules
  │   ├── ast/                # AST-related modules (legacy)
  │   ├── pyproject.toml      # Poetry configuration
  │   ├── poetry.lock         # Poetry lock file
  │   └── README.md           # Package documentation
  │
  ├── templates/               # 📄 Jinja2 Templates
  │   ├── tex/                # LaTeX templates
  │   │   └── cv-deedy.tex.j2 # Main LaTeX template (PDF output)
  │   └── web/                # HTML/web templates
  |       ├── sitemap.xml.j2  # Sitemap template
  │       └── index.html.j2   # Main HTML template (web output)
  │
  ├── tex/                     # 📝 LaTeX & PDF Components
  │   ├── cv.tex              # Generated LaTeX file
  │   ├── cv.pdf              # Generated PDF output
  │   ├── deedy-resume.cls    # LaTeX class file
  │   ├── fonts/              # Custom fonts for PDF styling
  │   └── *.aux, *.log, etc.  # LaTeX compilation artifacts
  │
  ├── gh-pages/                # 🌐 Web Deployment (Vite Project)
  │   ├── src/                # Source files for web app
  │   │   ├── main.js         # Main JavaScript entry point
  │   │   ├── styles.css      # Web styling
  │   │   └── fallback-detection.js # PDF.js capability detection
  │   ├── public/             # Static assets
  │   │   ├── cv.pdf          # PDF copy for web display
  │   │   ├── pdfjs/          # PDF.js viewer files
  │   │   ├── img/            # Web assets/images/favicons
  │   │   ├── sitemap.xml     # SEO sitemap
  │   │   └── robots.txt      # Search engine directives
  │   ├── dist/               # Built/compiled output (GitHub Pages deployment)
  │   │   ├── index.html      # Generated main web CV page
  │   │   ├── assets/         # Bundled CSS/JS assets
  │   │   ├── cv.pdf          # PDF copy for deployment
  │   │   └── pdfjs/          # PDF.js viewer files (copied)
  │   ├── package.json        # Node.js dependencies
  │   ├── pnpm-lock.yaml      # Package manager lock file
  │   ├── vite.config.js      # Vite build configuration
  │   ├── eslint.config.js    # ESLint configuration
  │   └── index.html          # Development HTML template
  │
  ├── .github/                 # 🔄 CI/CD Workflows
  └── .cursor/rules/           # 📋 Project Rules
  ```

  ## 🎯 Component Purposes

  ### **📊 Data Layer**

  - `cv_data.yaml`: **Single source of truth** - All CV content in structured YAML
  - `templates/*.j2`: **Jinja2 templates** for rendering to different formats

  ### **🐍 Python Package (`cv_renderer/`)**

  - **Purpose**: Template-based CV generation system with modern src-layout structure
  - **Functionality**: Renders YAML data to LaTeX/HTML using Jinja2 templates
  - **CLI**: `python -m cv_renderer` for command-line usage
  - **Structure**: Follows Python src-layout with source code in `src/cv_renderer/`
  - **Testing**: Comprehensive test suite in `tests/` directory
  - **Dependencies**: Managed with Poetry (`pyproject.toml` and `poetry.lock`)

  ### **📝 LaTeX & PDF Components (`tex/`)**

  - `tex/cv.tex`: **Generated LaTeX** from YAML data via template
  - `tex/cv.pdf`: **Final PDF output** compiled from LaTeX
  - `tex/deedy-resume.cls`: **LaTeX class** defining document style
  - `tex/fonts/`: **Custom fonts** for PDF styling
  - `tex/*.aux, *.log, etc.`: **LaTeX compilation artifacts** (auto-generated)

  ### **🌐 Web Deployment (`gh-pages/`)**

  - **Purpose**: Modern Vite-based web application for GitHub Pages CV deployment
  - **Development Structure**:
    - `src/`: **Source files** - JavaScript, CSS, and detection scripts
    - `public/`: **Static assets** - PDF, PDF.js viewer, images, SEO files
    - `index.html`: **Development template** for Vite
  - **Build & Deployment**:
    - `dist/`: **Production build** output for GitHub Pages deployment
    - `vite.config.js`: **Build configuration** for asset bundling and optimization
    - `package.json`: **Dependencies** and build scripts
  - **PDF Integration**: PDF.js viewer for seamless in-browser PDF display
  - **Modern Tooling**: ESLint, pnpm, and Vite for development workflow

  ### **🔧 Build & Automation**

  - `Makefile`: **Build commands** for generating different formats
  - `.github/`: **CI/CD workflows** for automated building/deployment

  ## 📐 Design Principles

  1. **Single Source of Truth**: All content originates from `cv_data.yaml`
  2. **Template-Based**: Use Jinja2 templates for consistent rendering
  3. **Multi-Format Output**: LaTeX/PDF, HTML, and web deployment
  4. **Separation of Concerns**: Data, templates, rendering logic, and deployment are separate
  5. **Automated Pipeline**: From YAML → Templates → Multiple Outputs → Deployment
  6. **Organized Structure**: LaTeX files contained in `tex/` directory
  7. **Modern Python Structure**: Follows src-layout with proper separation of source and tests

  ## 🚫 What NOT to Do

  - Don't duplicate content across formats - use templates
  - Don't place generated files in version control (except web deployment)
  - Don't mix data with presentation logic
  - Don't create files outside the established structure
  - Don't bypass the template system for content changes
  - Don't put LaTeX files in the root directory - use `tex/`

examples:

- input: |

  # Bad: Mixed structure with LaTeX files in root

  ├── cv.tex
  ├── cv.pdf
  ├── cv_latex.tex
  ├── cv_html.html
  ├── python_scripts/
  └── web_files/

  # Good: Organized structure with tex/ directory and src-layout

  ├── cv_data.yaml
  ├── cv_renderer/
  │ ├── src/cv_renderer/
  │ ├── tests/
  │ └── pyproject.toml
  ├── templates/
  ├── tex/
  │ ├── cv.tex
  │ ├── cv.pdf
  │ └── deedy-resume.cls
  └── gh-pages/
  output: "Proper CV project organization with LaTeX files contained in tex/ directory"

metadata:
priority: high
version: 1.2
principle: "Structure enables maintainability and automation"
</rule>
