"""
Renderer module for CV rendering.

Core CV rendering functionality using Jinja2 templates with AST-based
markdown processing.
"""

from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List

import yaml
from jinja2 import Environment, FileSystemLoader, select_autoescape

from .ast import (
    ASTToHTMLRenderer,
    ASTToLaTeXRenderer,
    ASTToPlainRenderer,
    escape_html_text,
    escape_latex_text,
)
from .models import CVData


class CVRenderer:
    """CV Renderer using Jinja2 templates with AST-based markdown processing."""

    def __init__(self, templates_dir: Path) -> None:
        """Initialize the renderer with templates directory."""
        self.templates_dir = templates_dir

        self._filters = self._build_filters()
        self._globals = self._build_globals()

        self._env = self._build_env()

        # Initialize AST renderers
        self._ast_latex_renderer = ASTToLaTeXRenderer()
        self._ast_html_renderer = ASTToHTMLRenderer()
        self._ast_plain_renderer = ASTToPlainRenderer()

    def _build_filters(self) -> Dict[str, Any]:
        return {
            "escape_latex": escape_latex_text,
            "escape_html": escape_html_text,
            "markdown_latex": self._markdown_to_latex,
            "markdown_html": self._markdown_to_html,
            "markdown_plain": self._markdown_to_plain,
        }

    def _build_globals(self) -> Dict[str, Any]:
        return {}

    def _build_env(self) -> Environment:
        env = Environment(
            loader=FileSystemLoader(self.templates_dir),
            autoescape=select_autoescape(["html", "xml"]),
            trim_blocks=True,
            lstrip_blocks=True,
        )

        for filter_name, filter_func in self._filters.items():
            env.filters[filter_name] = filter_func

        for global_name, global_func in self._globals.items():
            env.globals[global_name] = global_func

        return env

    def load_raw_data(self, data_file: str) -> Dict[str, Any]:
        """Load raw CV data from YAML file without validation."""
        with open(data_file, "r", encoding="utf-8") as f:
            try:
                data: Dict[str, Any] = yaml.safe_load(f)
                return data
            except yaml.YAMLError as e:
                raise ValueError(f"Unable to parse {data_file} as YAML: {e}")

    def validate_cv_data(self, raw_data: Dict[str, Any]) -> CVData:
        """Validate CV data using Pydantic models."""
        try:
            # Validate using Pydantic model - it handles all conversion
            # automatically
            return CVData(**raw_data)
        except Exception as e:
            raise ValueError(f"CV data validation failed: {e}")

    def load_data(self, data_file: str) -> CVData:
        """Load and validate CV data from YAML file."""
        raw_data = self.load_raw_data(data_file)
        return self.validate_cv_data(raw_data)

    def convert_validated_data_for_templates(self, cv_data: CVData) -> Dict[str, Any]:
        """Convert validated CVData to template-friendly format."""
        data: Dict[str, Any] = cv_data.model_dump()
        return data

    def render_to_file(
        self, template_name: str, data: Dict[str, Any], output_path: Path
    ) -> None:
        """Render CV and save to file."""
        rendered = self.render(template_name, data)

        with open(output_path, "w", encoding="utf-8") as f:
            f.write(rendered)

        print(f"CV rendered to: {output_path}")

    def _build_context(self, template_name: str) -> Dict[str, Any]:
        return {
            "template_name": template_name,
        }

    def _build_static(self, template_name: str) -> Dict[str, Any]:
        return {
            "disclaimer_latex": self._render_disclaimer_latex(template_name),
            "disclaimer_html": self._render_disclaimer_html(template_name),
        }

    def _build_inject(self, template_name: str) -> Dict[str, Any]:
        inject = {}
        inject["context"] = self._build_context(template_name)
        inject["static"] = self._build_static(template_name)
        return inject

    def render(self, template_name: str, data: Dict[str, Any]) -> str:
        """Render CV using specified template and data."""
        template = self._env.get_template(template_name)
        render_data = {**data, **self._build_inject(template_name)}
        result: str = template.render(render_data)
        return result

    def _generate_disclaimer(self, template_name: str) -> str:
        """Generate disclaimer comment based on template format."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        disclaimer_lines = [
            "This file was automatically generated from a template.",
            "DO NOT EDIT THIS FILE DIRECTLY - your changes will be lost!",
            f"Generated on: {timestamp}",
            f"Template: {template_name}",
            "Generator: cv_renderer",
        ]

        return "\n".join(disclaimer_lines)

    def _render_disclaimer_latex(self, template_name: str) -> str:
        return self._ast_latex_renderer.render_comment(
            self._generate_disclaimer(template_name)
        )

    def _render_disclaimer_html(self, template_name: str) -> str:
        return self._ast_html_renderer.render_comment(
            self._generate_disclaimer(template_name)
        )

    def _process_markdown(self, markdown_text: Dict[str, Any], process: Any) -> str:
        if "ast" not in markdown_text:
            raise ValueError("Markdown text must contain an 'ast' field")
        result: str = process(markdown_text["ast"])
        return result

    def _markdown_to_latex(self, markdown_text: Dict[str, Any]) -> str:
        """Convert markdown text to LaTeX."""
        return self._process_markdown(markdown_text, self._ast_to_latex)

    def _markdown_to_html(self, markdown_text: Dict[str, Any]) -> str:
        """Convert markdown text to HTML."""
        return self._process_markdown(markdown_text, self._ast_to_html)

    def _markdown_to_plain(self, markdown_text: Dict[str, Any]) -> str:
        """Convert markdown text to plain text."""
        return self._process_markdown(markdown_text, self._ast_to_plain)

    def _ast_to_latex(self, ast: List[Dict[str, Any]]) -> str:
        """Convert AST to LaTeX."""
        return self._ast_latex_renderer.render_ast(ast)

    def _ast_to_html(self, ast: List[Dict[str, Any]]) -> str:
        """Convert AST to HTML."""
        return self._ast_html_renderer.render_ast(ast)

    def _ast_to_plain(self, ast: List[Dict[str, Any]]) -> str:
        """Convert AST to plain text."""
        return self._ast_plain_renderer.render_ast(ast)
